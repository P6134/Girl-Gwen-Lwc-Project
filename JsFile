import { LightningElement,track,wire } from 'lwc';
import { NavigationMixin } from 'lightning/navigation';
import ggFormLogo from "@salesforce/resourceUrl/ggHeaderLogo";
import getchildRecList from '@salesforce/apex/GGMPLCFormController.returnChildRecList';
import insertIntakeByMappedChildRec from '@salesforce/apex/GGMPLCFormController.saveIntakeRecord';
import { ShowToastEvent } from 'lightning/platformShowToastEvent'

export default class GgMPLCForm1 extends NavigationMixin(LightningElement) {

    mplcLogo = ggFormLogo;
    receivedPropertyValue;
    ggFamilyParentRecId;
    contactChildReclstData;
    contactParentReclstData;
    fNameValue;
    lNameValue;
    birthdateValue;
    parentGuardianfName;
    parentGuardianlName;
    parentGuardianSign;
    currentDate;
    parentFirstName;
    parentLastName;
    parentPhoneNumber;
	@track parentGuardianFNm = '[]';
		 @track isError = false;
		@track errorMsg= '';
		@track isLoading = false;

        /* These are the checkbox Properties */
        checkboxValue1 = false;
        checkboxValue2 = false;
        @track  flagPassToController= false;

    @track userInput = '';
    @track signature = '';
    @track testContactChildItemArr=[];
    @track testContactChildItemArrClone=[];
  

   constructor() {
    super();
    var url = window.location.href;
    var urlParams = {};
    var params = url.split("?")[1];
    if (params) {
        params = params.split("&");
        for (var i = 0; i < params.length; i++) {
            var pair = params[i].split("=");
            urlParams[pair[0]] = pair[1];
        }
    }
    this.ggFamilyParentRecId= pair[1];
    
 
}


/* checkbox handle change Method */
handleCheckbox1Change(event) {
    this.checkboxValue2= false;
    this.checkboxValue1 = event.target.checked;
   
     console.log('this.checkboxValue1');
     this.flagPassToController= this.checkboxValue1;
} 

handleCheckbox2Change(event){
    this.checkboxValue1= false;
    this.checkboxValue2 = event.target.checked;
    console.log('this.checkboxValue2');
    this.flagPassToController= false;
}


   @wire(getchildRecList,{parentRecId: "$ggFamilyParentRecId"})
   wiredContactWrappers({ error, data }) {
       if (data) {
         
         
           this.contactChildReclstData = data;
           this.testContactChildItemArr = JSON.parse(JSON.stringify(data));

           this.parentGuardianFNm= this.testContactChildItemArr[0];
				
          console.log('Parent/Guardian Name===> '+JSON.stringify(this.parentGuardianFNm));
   
           this.currentDate = data.map(wrapperList => wrapperList.currDateOfSignature);
           console.log(this.currentDate);
   
           this.parentFirstName= data.map(wrapperList => wrapperList.parentfName);
           console.log(this.parentFirstName);
					 
					  this.parentPhoneNumber= data.map(wrapperList => wrapperList.gradeSelectedColumn);
           console.log('Parent Phone Number====> '+this.parentPhoneNumber);
           this.parentLastName= data.map(wrapperList => wrapperList.parentlName);
           console.log(this.parentLastName);
           return;
       } else if (error) {
           // Handle the error
           this.handleError(error.body.message);
       }
   }


   
    addRow() {
        this.testContactChildItemArrClone= this.testContactChildItemArr;
        console.log('##this.testContactChildItemArrClone==> '+this.testContactChildItemArrClone);
        
        var newItem = [{ 
       
            childRecordId: 'newRecFlag',      
            firstName: '',
            lastName:  '',
            Dob:  '',
						parentfName: '',
						parentlName: '',
                        gradeColumn: ''
          
        }];
				console.log(JSON.stringify(this.testContactChildItemArr));
        this.testContactChildItemArr = this.testContactChildItemArr.concat(newItem);
				console.log(JSON.stringify(this.testContactChildItemArr));
		
    }
   
    handleDeleteRow(event) {
      
              const lst= this.testContactChildItemArr;
				const ind=event.currentTarget.dataset.index;
				console.log(ind);
				console.log(JSON.stringify(this.testContactChildItemArr[ind]));
                lst.splice(ind, 1);
				console.log(lst);
				this.testContactChildItemArr= lst;
				console.log(JSON.stringify(this.testContactChildItemArr));
    } 

		
handleChange(event) {
    const { value, dataset } = event.target;
    const { index, field } = dataset;
    this.testContactChildItemArr[index][field] = value;
  
}

handleFNameChange(event){
    this.parentGuardianFNm.parentfName= event.target.value;
    console.log(this.parentGuardianFNm.parentfName);

}

handleLNameChange(event){
    this.parentGuardianFNm.parentlName= event.target.value;
    console.log(this.parentGuardianFNm.parentlName);

}
		
		
		handlePhnNumberChange(event){
			 this.parentGuardianFNm.parentPhnNumber= event.target.value;
    console.log('Parent Phone On Val Change===> '+this.parentGuardianFNm.parentPhnNumber);	
		}


handleSignChange(event){
   this.userInput = event.target.value;
    this.signature = `${this.userInput}`;//Signature:
    console.log(this.signature);
    console.log(this.userInput);
}

		
	
		

handleSubmit() {
  
    var checkBoxVal= this.flagPassToController;
    console.log('Checked Value Pass In Field==> '+checkBoxVal);

		var currlist=  this.testContactChildItemArr;
		let isErr= false;
		console.log(JSON.stringify(currlist));
		var lstLength= currlist.length;
		console.log(lstLength);
		for(var i=0; i<lstLength; i++){
				console.log('FirstName when Value are null===> '+this.testContactChildItemArr[i].firstName);
				console.log('Parent Phone Number On Submit===> '+this.testContactChildItemArr[i].parentPhnNumber);
			console.log('User Input==> '+this.userInput);
			if ( this.testContactChildItemArr[i].firstName === undefined || this.testContactChildItemArr[i].lastName === undefined || this.testContactChildItemArr[i].Dob === undefined || this.testContactChildItemArr[i].parentfName === undefined || this.testContactChildItemArr[i].parentlName === undefined || this.userInput === '' || this.testContactChildItemArr[i].parentPhnNumber === undefined) {
					  isErr=true;
						this.isError=isErr;
						
						console.log(isErr);
						
						
				}else{
						this.isError=false;
						console.log(this.isError);
					
				}
				break;
		}
    
   if(this.isError== true){
			 this.errorMsg=  this.showReqFieldMissingToast();
			 console.log(this.errorMsg);
			
	 }else{
			 this.isLoading = true;
	  var recDataLst= JSON.stringify(this.testContactChildItemArr);
    console.log(recDataLst); 
   

   var pConRecId= this.ggFamilyParentRecId;
   console.log('Test Parent1 :'+parentSignatureTest);

   var parentSignatureTest=  this.userInput;   
   console.log(parentSignatureTest);
     

    var checkBoxVal= this.flagPassToController;
    console.log('Checked Value Pass In Field Success Mode==> '+checkBoxVal);
			 
    insertIntakeByMappedChildRec({ itemData : recDataLst, mplcSign: parentSignatureTest, parentId:pConRecId, communityActivities:checkBoxVal })
    
    .then(result=>{
        this.message = result;
            this.error = undefined;
            this.showSuccessToast();
				     this.isLoading = false;
          console.log(JSON.stringify(result));
				  this[NavigationMixin.Navigate]({
                type: 'standard__webPage',
                attributes: {
                 
                    url: '/intakeThankyouPage'
                },
            
            });
    })
    .catch(error =>{
				this.isLoading = false;
       this.errorMsg=error.message;
				 
       return this.showErrorToast();
       window.console.log(this.error);
				//
    });
	 }
}

    showSuccessToast() {
        const evt = new ShowToastEvent({
            title: 'Toast Success',
            message: 'Intake record created successfully!',
            variant: 'success',
            mode: 'dismissable'
        });
        this.dispatchEvent(evt);
    }
    showErrorToast() {
        const evt = new ShowToastEvent({
            title: 'Toast Error',
            message: 'Some unexpected error',
            variant: 'error',
            mode: 'dismissable'
        });
        this.dispatchEvent(evt);
    }    
		
		showReqFieldMissingToast() {
        const evt = new ShowToastEvent({
            title: 'Toast Error',
            message: 'Please Fill all the required blank fields!',
            variant: 'error',
            mode: 'dismissable'
        });
        this.dispatchEvent(evt);
    }  

}		